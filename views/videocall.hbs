<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VC Chat</title>
    <link rel="stylesheet" href="videocallstyle.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script>
        const ROOM_ID = "<%= roomId %>";
    </script>
</head>

<body>
    <div class="header">
        <div class="logo">
            <h3>VC Chat</h3>
        </div>
        <!-- <div id="showChat" class="options_button">
            <i class="material-icons">chat</i>
        </div>
        <div class="header_back"><i class="material-icons">arrow_back</i></div> -->
    </div>

    <div class="main">
        <div class="main_left">
            <div class="videos_group">
                <div id="video-grid">
                    
                </div>
            </div>

            <div class="options">
                <div class="options_left">
                    <div id="stopVideo" class="options_button">
                        <i class="material-icons">videocam</i>
                    </div>
                    <div id="muteButton" class="options_button">
                        <i class="material-icons">mic</i>
                    </div>
                    <div id="shareScreen" class="options_button">
                        <i class="material-icons">screen_share</i>
                    </div>
                </div>

                <div class="options_right">
                    <div id="disconnect" class="options_button background_red">
                        <i class="material-icons">phone</i>
                    </div>
                    <div id="inviteButton" class="options_button">
                        <i class="material-icons">person_add</i>
                    </div>
                </div>
            </div>
        </div>

        <div class="main_right">
            <div class="main_chat_window" id="chat-messages">
                <div class="messages">
                </div>
            </div>

            <div class="main_message_container">
                <input type="text" id="chat-input" placeholder="Type a message...">
                <button id="sendButton" class="options_button">
                    <i class="material-icons">send</i>
                </button>
            </div>
        </div>
    </div>

</body>

{{!-- <script src="script.js"></script> --}}


</html>
<script>


    
const socket = io('/');

const hostVideo = document.createElement('video');
hostVideo.muted = true;

let user = localStorage.getItem('username');
while (!user) {
    user = prompt("Enter your name:");
}

// Local development PeerJS server
//var peer = new Peer({
 //   host: '127.0.0.1',
//    port: '3000',
//    path: '/peerjs',
//});

// For deployment
 var peer = new Peer({
     host: 'dropling.onrender.com',
     port: '',
     path: '/peerjs',
     secure: true
 });

const peers = {};
let hostVideoStream;

// Function to add video stream to the video grid
function addVideoStream(video, stream) {
    video.srcObject = stream;
    video.addEventListener('loadedmetadata', () => {
        video.play();
        document.getElementById('video-grid').append(video);
    });
}

// Connect to a new user
function connectToNewUser(userId, stream) {
    const call = peer.call(userId, stream);
    const video = document.createElement('video');
    call.on('stream', userVideoStream => {
        addVideoStream(video, userVideoStream);
    });
    call.on('close', () => {
        video.remove();
    });

    peers[userId] = call;
}

// Get user media for the host
navigator.mediaDevices.getUserMedia({
    video: true,
    audio: true
}).then(stream => {
    hostVideoStream = stream;
    addVideoStream(hostVideo, stream);

    peer.on('call', call => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream);
        });
    });

    socket.on('user-connected', (userId, userName) => {
        connectToNewUser(userId, stream);
        alert(`${userName} has joined the room.`);
    });

    socket.on('user-disconnected', (userId, userName) => {
        if (peers[userId]) peers[userId].close();
        alert(`${userName} has left the room.`);
    });

    socket.on('user-toggled-mic', (userId, userName, isEnabled) => {
        alert(`${userName} has ${isEnabled ? 'unmuted' : 'muted'} their mic.`);
    });

    socket.on('user-toggled-cam', (userId, userName, isEnabled) => {
        alert(`${userName} has ${isEnabled ? 'turned on' : 'turned off'} their camera.`);
    });

    socket.on('createMessage', (message, userName) => {
        const messageContainer = document.querySelector('.messages');
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');

        if (userName === user) {
            messageElement.classList.add('self-message');
            sendSound.play();
        } else {
            messageElement.classList.add('others-message');
            receiveSound.play();
        }

        messageElement.innerHTML = `<b>${userName} :</b><span>${message}</span>`;
        messageContainer.append(messageElement);
        scrollToBottom();
    });
});

function scrollToBottom() {
    const chatWindow = document.querySelector('.main_chat_window');
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

peer.on('open', id => {
    console.log('Id' + id);
    socket.emit('join-room', ROOM_ID, id, user);
});

// Button functionalities
const invite = document.querySelector("#inviteButton");
const mute = document.querySelector("#muteButton");
const noVideo = document.querySelector("#stopVideo");
const cutCall = document.querySelector("#disconnect");
// const shareScreen = document.querySelector("#shareScreen");

mute.addEventListener("click", () => {
    const enabled = hostVideoStream.getAudioTracks()[0].enabled;
    if (enabled) {
        hostVideoStream.getAudioTracks()[0].enabled = false;
        html = '<i class="material-icons">mic_off</i>';
    } else {
        hostVideoStream.getAudioTracks()[0].enabled = true;
        html = '<i class="material-icons">mic</i>';
    }
    mute.classList.toggle("background_red");
    mute.innerHTML = html;
    socket.emit('toggle-mic', ROOM_ID, peer.id, user, !enabled);
});

noVideo.addEventListener("click", () => {
    const enabled = hostVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
        hostVideoStream.getVideoTracks()[0].enabled = false;
        html = '<i class="material-icons">videocam_off</i>';
    } else {
        hostVideoStream.getVideoTracks()[0].enabled = true;
        html = '<i class="material-icons">videocam</i>';
    }
    noVideo.classList.toggle("background_red");
    noVideo.innerHTML = html;
    socket.emit('toggle-cam', ROOM_ID, peer.id, user, !enabled);
});

invite.addEventListener("click", () => {
    prompt("Copy this link and share with your friends to add them on this VC Chat room now!", window.location.href);
});

cutCall.addEventListener("click", () => {
    try {
        peer.destroy();
        const videoCall = document.querySelector("video");
        if (videoCall) {
            videoCall.remove();
        }
        socket.emit("custom-disconnect");
        window.location.href = "/";
    } catch (error) {
        console.error("Error during disconnection:", error);
    }
});

// Chat functionality
const receiveSound = new Audio('/sounds/message-receive.mp3');
const sendSound = new Audio('/sounds/message-send.mp3');
const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('sendButton');

sendButton.addEventListener('click', () => {
    const message = chatInput.value;
    if (message.trim().length > 0) {
        socket.emit('message', message, user);
        chatInput.value = '';
    }
});

chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && chatInput.value) {
        socket.emit('message', chatInput.value, user);
        chatInput.value = '';
    }
});

// Screen sharing functionality
// shareScreen.addEventListener("click", () => {
//     if (shareScreen.classList.contains("sharing")) {
//         stopScreenShare();
//     } else {
//         startScreenShare();
//     }
// });

// function startScreenShare() {
//     navigator.mediaDevices.getDisplayMedia({
//         video: true,
//         audio: true
//     }).then(stream => {
//         shareScreen.classList.add("sharing");
//         shareScreen.innerHTML = '<i class="material-icons">stop_screen_share</i>';
        
//         // Replace hostVideoStream with screen stream
//         replaceStream(stream);

//         stream.getVideoTracks()[0].onended = () => {
//             stopScreenShare();
//         };

//         socket.emit('toggle-screen-share', ROOM_ID, peer.id, user, true);
//     }).catch(error => {
//         console.error('Error sharing screen:', error);
//     });
// }

// function stopScreenShare() {
//     shareScreen.classList.remove("sharing");
//     shareScreen.innerHTML = '<i class="material-icons">screen_share</i>';

//     // Revert to the original camera stream
//     navigator.mediaDevices.getUserMedia({
//         video: true,
//         audio: true
//     }).then(stream => {
//         replaceStream(stream);
//         socket.emit('toggle-screen-share', ROOM_ID, peer.id, user, false);
//     }).catch(error => {
//         console.error('Error stopping screen share:', error);
//     });
// }

// // Replace the current stream with a new one
// function replaceStream(newStream) {
//     // Stop all old tracks
//     hostVideoStream.getTracks().forEach(track => track.stop());

//     // Replace with the new stream
//     hostVideoStream = newStream;
//     addVideoStream(hostVideo, newStream);

//     // Notify peers about the new stream
//     for (let userId in peers) {
//         const call = peer.call(userId, newStream);
//         call.on('stream', userVideoStream => {
//             addVideoStream(document.createElement('video'), userVideoStream);
//         });
//     }
// }
// socket.on('user-toggled-screen-share', (userId, userName, isEnabled) => {
//     if (isEnabled) {
//         // Find the call object for the user
//         const call = peer.call(userId, hostVideoStream);
//         const video = document.createElement('video');
//         call.on('stream', userVideoStream => {
//             addVideoStream(video, userVideoStream);
//         });
//         call.on('close', () => {
//             video.remove();
//         });
//         peers[userId] = call;
//     } else {
//         // Stop receiving the user's screen share
//         if (peers[userId]) peers[userId].close();
//         alert(`${userName} has stopped sharing their screen.`);
//     }
//     alert(`${userName} has ${isEnabled ? 'started' : 'stopped'} sharing their screen.`);
// });



// ... other initializations and event handlers

const shareScreen = document.querySelector("#shareScreen");

shareScreen.addEventListener("click", () => {
    if (shareScreen.classList.contains("sharing")) {
        stopScreenShare();
    } else {
        startScreenShare();
    }
});

function startScreenShare() {
    navigator.mediaDevices.getDisplayMedia({
        video: true,
        audio: true
    }).then(stream => {
        shareScreen.classList.add("sharing");
        shareScreen.innerHTML = '<i class="material-icons">stop_screen_share</i>';
        
        // Replace hostVideoStream with screen stream
        replaceStream(stream);

        stream.getVideoTracks()[0].onended = () => {
            stopScreenShare();
        };

        socket.emit('toggle-screen-share', ROOM_ID, peer.id, user, true);
    }).catch(error => {
        console.error('Error sharing screen:', error);
    });
}

function stopScreenShare() {
    shareScreen.classList.remove("sharing");
    shareScreen.innerHTML = '<i class="material-icons">screen_share</i>';

    // Revert to the original camera stream
    navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
    }).then(stream => {
        replaceStream(stream);
        socket.emit('toggle-screen-share', ROOM_ID, peer.id, user, false);
    }).catch(error => {
        console.error('Error stopping screen share:', error);
    });
}

// Replace the current stream with a new one and notify peers
function replaceStream(newStream) {
    // Stop all old tracks
    if (hostVideoStream) {
        hostVideoStream.getTracks().forEach(track => track.stop());
    }

    // Replace with the new stream
    hostVideoStream = newStream;
    addVideoStream(hostVideo, newStream);

    // Notify peers about the new stream
    for (let userId in peers) {
        const call = peers[userId];

        if (call) {
            call.peerConnection.getSenders().forEach(sender => {
                if (sender.track.kind === 'video') {
                    sender.replaceTrack(newStream.getVideoTracks()[0]);
                } else if (sender.track.kind === 'audio') {
                    sender.replaceTrack(newStream.getAudioTracks()[0]);
                }
            });
        }
    }
}

// Handle other users' screen share events
socket.on('user-toggled-screen-share', (userId, userName, isEnabled) => {
    if (isEnabled) {
        // Find the call object for the user
        const call = peer.call(userId, hostVideoStream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
            alert("bs");
            addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
            video.remove();
        });
        peers[userId] = call;
    } else {
        // Stop receiving the user's screen share
        if (peers[userId]) peers[userId].close();
        alert(`${userName} has stopped sharing their screen.`);
    }
    alert(`${userName} has ${isEnabled ? 'started' : 'stopped'} sharing their screen.`);
});

// ... other functionalities such as message sending, UI updates


</script>